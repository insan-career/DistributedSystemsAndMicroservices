{
	"info": {
		"_postman_id": "2ec35fd0-5daa-4af3-a69d-2ed97f5286fe",
		"name": "Koobits_DistributedSystemsAndMicroservices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "356813"
	},
	"item": [
		{
			"name": "UserServices",
			"item": [
				{
					"name": "AddUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and email\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'name', 'email');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Name should be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Jimmy\",\r\n  \"email\": \"insan.career@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7254/api/Users/AddUser",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Users",
								"AddUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and email\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('name');",
									"        pm.expect(user).to.have.property('email');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7254/api/Users/GetUsers",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Users",
								"GetUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByID for existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and email\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('email');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7254/api/Users/GetUser/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Users",
								"GetUser",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByID for non-existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7254/api/Users/GetUser/-1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Users",
								"GetUser",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OrderServices",
			"item": [
				{
					"name": "CreateOrder for existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('orderId');",
									"  pm.expect(responseData).to.have.property('userId');",
									"  pm.expect(responseData).to.have.property('product');",
									"  pm.expect(responseData).to.have.property('quantity');",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.quantity).to.be.a('number');",
									"  pm.expect(responseData.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Product is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Product should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"User ID is a positive integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.userId).to.be.a('number');",
									"  pm.expect(responseData.userId).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"orderId\": 0,\r\n  \"userId\": 1,\r\n  \"product\": \"p1\",\r\n  \"quantity\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7254/api/Orders/CreateOrder",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Orders",
								"CreateOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateOrder for non-existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"orderId\": 0,\r\n  \"userId\": -1,\r\n  \"product\": \"p1\",\r\n  \"quantity\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7254/api/Orders/CreateOrder",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Orders",
								"CreateOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetOrders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order).to.have.property('orderId');",
									"        pm.expect(order).to.have.property('userId');",
									"        pm.expect(order).to.have.property('product');",
									"        pm.expect(order).to.have.property('quantity');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Product is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Product should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order.quantity).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7254/api/Orders/GetOrders",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Orders",
								"GetOrders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetOrderByID for existing order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"OrderId, userId, product, and quantity fields exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('orderId');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('product');",
									"    pm.expect(responseData).to.have.property('quantity');",
									"});",
									"",
									"",
									"pm.test(\"OrderId and userId are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.orderId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"OrderId should be a non-negative integer\");",
									"  pm.expect(responseData.userId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"UserId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.quantity).to.be.a('number').and.to.satisfy((quantity) => quantity >= 0, \"Quantity must be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7254/api/Orders/GetOrder/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Orders",
								"GetOrder",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetOrderByID for non-existing order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7254/api/Orders/GetOrder/-1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7254",
							"path": [
								"api",
								"Orders",
								"GetOrder",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}